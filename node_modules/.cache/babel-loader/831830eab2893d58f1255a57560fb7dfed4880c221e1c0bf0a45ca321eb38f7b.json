{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RAVI_RK\\\\blockchain project\\\\Blockchain-Healthcare\\\\src\\\\healthcare1.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Healthcare = () => {\n  _s();\n  // State variables... (no changes here)\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isOwner, setIsOwner] = useState(false);\n  const [providerAddress, setProviderAddress] = useState(\"\");\n  const [fetchPatientID, setFetchPatientID] = useState(\"\");\n  const [patientRecords, setPatientRecords] = useState([]);\n  const [addPatientID, setAddPatientID] = useState(\"\");\n  const [patientName, setPatientName] = useState(\"\");\n  const [diagnosis, setDiagnosis] = useState(\"\");\n  const [treatment, setTreatment] = useState(\"\");\n  const [recordCategory, setRecordCategory] = useState(0);\n  const [registerPatientAddress, setRegisterPatientAddress] = useState(\"\");\n  const [registerPatientID, setRegisterPatientID] = useState(\"\");\n  const [myRecords, setMyRecords] = useState([]);\n\n  // --- ACTION REQUIRED ---\n  // 1. Paste your deployed contract address here\n  const contractAddress = \"0xc9961f1544d98f172efae63be562ecf16446633c\";\n\n  // --- ðŸš¨ THIS IS THE FIX ðŸš¨ ---\n  // 2. Paste the address of the wallet that deployed the contract (the owner)\n  const ownerAddress = \"0x8113efF1454B112F10c19D95cEeeF21Ac1a58d08\";\n\n  // Your ABI remains the same\n  const contractABI = [{\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\"\n  }, {\n    anonymous: false,\n    inputs: [{\n      indexed: true,\n      internalType: \"uint256\",\n      name: \"patientID\",\n      type: \"uint256\"\n    }, {\n      indexed: true,\n      internalType: \"address\",\n      name: \"patientAddress\",\n      type: \"address\"\n    }],\n    name: \"PatientRegistered\",\n    type: \"event\"\n  }, {\n    anonymous: false,\n    inputs: [{\n      indexed: true,\n      internalType: \"uint256\",\n      name: \"patientID\",\n      type: \"uint256\"\n    }, {\n      indexed: false,\n      internalType: \"uint256\",\n      name: \"recordID\",\n      type: \"uint256\"\n    }, {\n      indexed: true,\n      internalType: \"address\",\n      name: \"provider\",\n      type: \"address\"\n    }],\n    name: \"RecordAdded\",\n    type: \"event\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"patientID\",\n      type: \"uint256\"\n    }, {\n      internalType: \"string\",\n      name: \"patientName\",\n      type: \"string\"\n    }, {\n      internalType: \"string\",\n      name: \"diagnosis\",\n      type: \"string\"\n    }, {\n      internalType: \"string\",\n      name: \"treatment\",\n      type: \"string\"\n    }, {\n      internalType: \"enum HealthcareRecords.RecordType\",\n      name: \"category\",\n      type: \"uint8\"\n    }],\n    name: \"addRecord\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"provider\",\n      type: \"address\"\n    }],\n    name: \"authorizeProvider\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"getMyRecords\",\n    outputs: [{\n      components: [{\n        internalType: \"uint256\",\n        name: \"recordID\",\n        type: \"uint256\"\n      }, {\n        internalType: \"string\",\n        name: \"patientName\",\n        type: \"string\"\n      }, {\n        internalType: \"string\",\n        name: \"diagnosis\",\n        type: \"string\"\n      }, {\n        internalType: \"string\",\n        name: \"treatment\",\n        type: \"string\"\n      }, {\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\"\n      }, {\n        internalType: \"enum HealthcareRecords.RecordType\",\n        name: \"category\",\n        type: \"uint8\"\n      }],\n      internalType: \"struct HealthcareRecords.Record[]\",\n      name: \"\",\n      type: \"tuple[]\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"patientID\",\n      type: \"uint256\"\n    }],\n    name: \"getPatientRecords\",\n    outputs: [{\n      components: [{\n        internalType: \"uint256\",\n        name: \"recordID\",\n        type: \"uint256\"\n      }, {\n        internalType: \"string\",\n        name: \"patientName\",\n        type: \"string\"\n      }, {\n        internalType: \"string\",\n        name: \"diagnosis\",\n        type: \"string\"\n      }, {\n        internalType: \"string\",\n        name: \"treatment\",\n        type: \"string\"\n      }, {\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\"\n      }, {\n        internalType: \"enum HealthcareRecords.RecordType\",\n        name: \"category\",\n        type: \"uint8\"\n      }],\n      internalType: \"struct HealthcareRecords.Record[]\",\n      name: \"\",\n      type: \"tuple[]\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"patientAddress\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"patientID\",\n      type: \"uint256\"\n    }],\n    name: \"registerPatient\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }];\n  const recordCategories = [\"Consultation\", \"Prescription\", \"LabResult\"];\n  useEffect(() => {\n    const connectWallet = async () => {\n      if (window.ethereum) {\n        try {\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\n          await provider.send(\"eth_requestAccounts\", []);\n          const signer = provider.getSigner();\n          const accountAddress = await signer.getAddress();\n          const contract = new ethers.Contract(contractAddress, contractABI, signer);\n          setProvider(provider);\n          setSigner(signer);\n          setAccount(accountAddress);\n          setContract(contract);\n\n          // This check ensures the \"Authorize\" section appears only for the owner\n          if (ownerAddress) {\n            setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\n          }\n        } catch (error) {\n          console.error(\"Error connecting to wallet: \", error);\n        }\n      } else {\n        alert(\"Please install MetaMask!\");\n      }\n    };\n    connectWallet();\n  }, []);\n\n  // --- All other functions remain the same ---\n  // ... (addRecord, getMyRecords, fetchPatientRecords, etc.)\n  const fetchPatientRecords = async () => {\n    if (!fetchPatientID) {\n      alert(\"Please enter a Patient ID\");\n      return;\n    }\n    try {\n      const records = await contract.getPatientRecords(fetchPatientID);\n      setPatientRecords(records);\n    } catch (error) {\n      console.error(\"Error fetching patient records\", error);\n      alert(\"Failed to fetch records. Are you an authorized provider?\");\n    }\n  };\n  const addRecord = async () => {\n    try {\n      const tx = await contract.addRecord(addPatientID, patientName, diagnosis, treatment, recordCategory);\n      await tx.wait();\n      alert(\"Record added successfully!\");\n    } catch (error) {\n      console.error(\"Error adding record:\", error);\n      alert(\"Failed to add record.\");\n    }\n  };\n  const authorizeProvider = async () => {\n    if (!isOwner) {\n      alert(\"Only the contract owner can perform this action.\");\n      return;\n    }\n    try {\n      const tx = await contract.authorizeProvider(providerAddress);\n      await tx.wait();\n      alert(`Provider ${providerAddress} authorized successfully`);\n    } catch (error) {\n      console.error(\"Error authorizing provider:\", error);\n    }\n  };\n  const registerPatient = async () => {\n    try {\n      const tx = await contract.registerPatient(registerPatientAddress, registerPatientID);\n      await tx.wait();\n      alert(\"Patient registered successfully!\");\n    } catch (error) {\n      console.error(\"Error registering patient:\", error);\n      alert(\"Failed to register patient. Check if the address or ID is already registered.\");\n    }\n  };\n  const getMyRecords = async () => {\n    try {\n      const records = await contract.getMyRecords();\n      setMyRecords(records);\n      if (records.length === 0) {\n        alert(\"No records found for your account.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching your records:\", error);\n      alert(\"Failed to fetch your records. Are you a registered patient?\");\n    }\n  };\n  const renderRecords = records => {\n    return records.map((record, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"record-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Record ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this), \" \", record.recordID.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Patient Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this), \" \", record.patientName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Diagnosis:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this), \" \", record.diagnosis]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Treatment:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this), \" \", record.treatment]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Category:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this), \" \", recordCategories[record.category]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Timestamp:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this), \" \", new Date(record.timestamp.toNumber() * 1000).toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this));\n  };\n\n  // --- The JSX / UI Part ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Healthcare Records dApp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this), account && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"account-info\",\n      children: [\"Connected Account: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 19\n    }, this), isOwner && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"owner-info\",\n      children: \"Role: Contract Owner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Patient Actions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action-button\",\n        onClick: getMyRecords,\n        children: \"View My Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), myRecords.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"records-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Your Medical Records:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this), renderRecords(myRecords)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Healthcare Provider Actions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Register a New Patient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-field\",\n          type: \"text\",\n          placeholder: \"Patient's Wallet Address\",\n          value: registerPatientAddress,\n          onChange: e => setRegisterPatientAddress(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-field\",\n          type: \"text\",\n          placeholder: \"Assign a Patient ID\",\n          value: registerPatientID,\n          onChange: e => setRegisterPatientID(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          onClick: registerPatient,\n          children: \"Register Patient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Add Patient Record\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-field\",\n          type: \"text\",\n          placeholder: \"Patient ID\",\n          value: addPatientID,\n          onChange: e => setAddPatientID(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-field\",\n          type: \"text\",\n          placeholder: \"Patient Name\",\n          value: patientName,\n          onChange: e => setPatientName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-field\",\n          type: \"text\",\n          placeholder: \"Diagnosis\",\n          value: diagnosis,\n          onChange: e => setDiagnosis(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-field\",\n          type: \"text\",\n          placeholder: \"Treatment\",\n          value: treatment,\n          onChange: e => setTreatment(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"input-field\",\n          value: recordCategory,\n          onChange: e => setRecordCategory(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"0\",\n            children: \"Consultation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"1\",\n            children: \"Prescription\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"2\",\n            children: \"Lab Result\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          onClick: addRecord,\n          children: \"Add Record\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Fetch Patient Records\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-field\",\n          type: \"text\",\n          placeholder: \"Enter Patient ID\",\n          value: fetchPatientID,\n          onChange: e => setFetchPatientID(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          onClick: fetchPatientRecords,\n          children: \"Fetch Records\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 11\n        }, this), patientRecords.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"records-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Fetched Records:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 15\n          }, this), renderRecords(patientRecords)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 7\n    }, this), isOwner && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contract Owner Actions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Authorize Healthcare Provider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-field\",\n          type: \"text\",\n          placeholder: \"Provider Address\",\n          value: providerAddress,\n          onChange: e => setProviderAddress(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          onClick: authorizeProvider,\n          children: \"Authorize Provider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 384,\n    columnNumber: 5\n  }, this);\n};\n_s(Healthcare, \"lEgOxQ+QlXCqya9r/kvZBKo6dFE=\");\n_c = Healthcare;\nexport default Healthcare;\nvar _c;\n$RefreshReg$(_c, \"Healthcare\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","Healthcare","_s","provider","setProvider","signer","setSigner","contract","setContract","account","setAccount","isOwner","setIsOwner","providerAddress","setProviderAddress","fetchPatientID","setFetchPatientID","patientRecords","setPatientRecords","addPatientID","setAddPatientID","patientName","setPatientName","diagnosis","setDiagnosis","treatment","setTreatment","recordCategory","setRecordCategory","registerPatientAddress","setRegisterPatientAddress","registerPatientID","setRegisterPatientID","myRecords","setMyRecords","contractAddress","ownerAddress","contractABI","inputs","stateMutability","type","anonymous","indexed","internalType","name","outputs","components","recordCategories","connectWallet","window","ethereum","providers","Web3Provider","send","getSigner","accountAddress","getAddress","Contract","toLowerCase","error","console","alert","fetchPatientRecords","records","getPatientRecords","addRecord","tx","wait","authorizeProvider","registerPatient","getMyRecords","length","renderRecords","map","record","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","recordID","toString","category","Date","timestamp","toNumber","toLocaleString","onClick","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/RAVI_RK/blockchain project/Blockchain-Healthcare/src/healthcare1.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\nconst Healthcare = () => {\r\n  // State variables... (no changes here)\r\n  const [provider, setProvider] = useState(null);\r\n  const [signer, setSigner] = useState(null);\r\n  const [contract, setContract] = useState(null);\r\n  const [account, setAccount] = useState(null);\r\n  const [isOwner, setIsOwner] = useState(false);\r\n  const [providerAddress, setProviderAddress] = useState(\"\");\r\n  const [fetchPatientID, setFetchPatientID] = useState(\"\");\r\n  const [patientRecords, setPatientRecords] = useState([]);\r\n  const [addPatientID, setAddPatientID] = useState(\"\");\r\n  const [patientName, setPatientName] = useState(\"\");\r\n  const [diagnosis, setDiagnosis] = useState(\"\");\r\n  const [treatment, setTreatment] = useState(\"\");\r\n  const [recordCategory, setRecordCategory] = useState(0);\r\n  const [registerPatientAddress, setRegisterPatientAddress] = useState(\"\");\r\n  const [registerPatientID, setRegisterPatientID] = useState(\"\");\r\n  const [myRecords, setMyRecords] = useState([]);\r\n\r\n  // --- ACTION REQUIRED ---\r\n  // 1. Paste your deployed contract address here\r\n  const contractAddress = \"0xc9961f1544d98f172efae63be562ecf16446633c\";\r\n\r\n  // --- ðŸš¨ THIS IS THE FIX ðŸš¨ ---\r\n  // 2. Paste the address of the wallet that deployed the contract (the owner)\r\n  const ownerAddress = \"0x8113efF1454B112F10c19D95cEeeF21Ac1a58d08\";\r\n\r\n  // Your ABI remains the same\r\n  const contractABI = [\r\n    {\r\n      inputs: [],\r\n      stateMutability: \"nonpayable\",\r\n      type: \"constructor\",\r\n    },\r\n    {\r\n      anonymous: false,\r\n      inputs: [\r\n        {\r\n          indexed: true,\r\n          internalType: \"uint256\",\r\n          name: \"patientID\",\r\n          type: \"uint256\",\r\n        },\r\n        {\r\n          indexed: true,\r\n          internalType: \"address\",\r\n          name: \"patientAddress\",\r\n          type: \"address\",\r\n        },\r\n      ],\r\n      name: \"PatientRegistered\",\r\n      type: \"event\",\r\n    },\r\n    {\r\n      anonymous: false,\r\n      inputs: [\r\n        {\r\n          indexed: true,\r\n          internalType: \"uint256\",\r\n          name: \"patientID\",\r\n          type: \"uint256\",\r\n        },\r\n        {\r\n          indexed: false,\r\n          internalType: \"uint256\",\r\n          name: \"recordID\",\r\n          type: \"uint256\",\r\n        },\r\n        {\r\n          indexed: true,\r\n          internalType: \"address\",\r\n          name: \"provider\",\r\n          type: \"address\",\r\n        },\r\n      ],\r\n      name: \"RecordAdded\",\r\n      type: \"event\",\r\n    },\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: \"uint256\",\r\n          name: \"patientID\",\r\n          type: \"uint256\",\r\n        },\r\n        {\r\n          internalType: \"string\",\r\n          name: \"patientName\",\r\n          type: \"string\",\r\n        },\r\n        {\r\n          internalType: \"string\",\r\n          name: \"diagnosis\",\r\n          type: \"string\",\r\n        },\r\n        {\r\n          internalType: \"string\",\r\n          name: \"treatment\",\r\n          type: \"string\",\r\n        },\r\n        {\r\n          internalType: \"enum HealthcareRecords.RecordType\",\r\n          name: \"category\",\r\n          type: \"uint8\",\r\n        },\r\n      ],\r\n      name: \"addRecord\",\r\n      outputs: [],\r\n      stateMutability: \"nonpayable\",\r\n      type: \"function\",\r\n    },\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: \"address\",\r\n          name: \"provider\",\r\n          type: \"address\",\r\n        },\r\n      ],\r\n      name: \"authorizeProvider\",\r\n      outputs: [],\r\n      stateMutability: \"nonpayable\",\r\n      type: \"function\",\r\n    },\r\n    {\r\n      inputs: [],\r\n      name: \"getMyRecords\",\r\n      outputs: [\r\n        {\r\n          components: [\r\n            {\r\n              internalType: \"uint256\",\r\n              name: \"recordID\",\r\n              type: \"uint256\",\r\n            },\r\n            {\r\n              internalType: \"string\",\r\n              name: \"patientName\",\r\n              type: \"string\",\r\n            },\r\n            {\r\n              internalType: \"string\",\r\n              name: \"diagnosis\",\r\n              type: \"string\",\r\n            },\r\n            {\r\n              internalType: \"string\",\r\n              name: \"treatment\",\r\n              type: \"string\",\r\n            },\r\n            {\r\n              internalType: \"uint256\",\r\n              name: \"timestamp\",\r\n              type: \"uint256\",\r\n            },\r\n            {\r\n              internalType: \"enum HealthcareRecords.RecordType\",\r\n              name: \"category\",\r\n              type: \"uint8\",\r\n            },\r\n          ],\r\n          internalType: \"struct HealthcareRecords.Record[]\",\r\n          name: \"\",\r\n          type: \"tuple[]\",\r\n        },\r\n      ],\r\n      stateMutability: \"view\",\r\n      type: \"function\",\r\n    },\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: \"uint256\",\r\n          name: \"patientID\",\r\n          type: \"uint256\",\r\n        },\r\n      ],\r\n      name: \"getPatientRecords\",\r\n      outputs: [\r\n        {\r\n          components: [\r\n            {\r\n              internalType: \"uint256\",\r\n              name: \"recordID\",\r\n              type: \"uint256\",\r\n            },\r\n            {\r\n              internalType: \"string\",\r\n              name: \"patientName\",\r\n              type: \"string\",\r\n            },\r\n            {\r\n              internalType: \"string\",\r\n              name: \"diagnosis\",\r\n              type: \"string\",\r\n            },\r\n            {\r\n              internalType: \"string\",\r\n              name: \"treatment\",\r\n              type: \"string\",\r\n            },\r\n            {\r\n              internalType: \"uint256\",\r\n              name: \"timestamp\",\r\n              type: \"uint256\",\r\n            },\r\n            {\r\n              internalType: \"enum HealthcareRecords.RecordType\",\r\n              name: \"category\",\r\n              type: \"uint8\",\r\n            },\r\n          ],\r\n          internalType: \"struct HealthcareRecords.Record[]\",\r\n          name: \"\",\r\n          type: \"tuple[]\",\r\n        },\r\n      ],\r\n      stateMutability: \"view\",\r\n      type: \"function\",\r\n    },\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: \"address\",\r\n          name: \"patientAddress\",\r\n          type: \"address\",\r\n        },\r\n        {\r\n          internalType: \"uint256\",\r\n          name: \"patientID\",\r\n          type: \"uint256\",\r\n        },\r\n      ],\r\n      name: \"registerPatient\",\r\n      outputs: [],\r\n      stateMutability: \"nonpayable\",\r\n      type: \"function\",\r\n    },\r\n  ];\r\n  const recordCategories = [\"Consultation\", \"Prescription\", \"LabResult\"];\r\n\r\n  useEffect(() => {\r\n    const connectWallet = async () => {\r\n      if (window.ethereum) {\r\n        try {\r\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n          await provider.send(\"eth_requestAccounts\", []);\r\n          const signer = provider.getSigner();\r\n          const accountAddress = await signer.getAddress();\r\n          const contract = new ethers.Contract(\r\n            contractAddress,\r\n            contractABI,\r\n            signer\r\n          );\r\n\r\n          setProvider(provider);\r\n          setSigner(signer);\r\n          setAccount(accountAddress);\r\n          setContract(contract);\r\n\r\n          // This check ensures the \"Authorize\" section appears only for the owner\r\n          if (ownerAddress) {\r\n            setIsOwner(\r\n              accountAddress.toLowerCase() === ownerAddress.toLowerCase()\r\n            );\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error connecting to wallet: \", error);\r\n        }\r\n      } else {\r\n        alert(\"Please install MetaMask!\");\r\n      }\r\n    };\r\n    connectWallet();\r\n  }, []);\r\n\r\n  // --- All other functions remain the same ---\r\n  // ... (addRecord, getMyRecords, fetchPatientRecords, etc.)\r\n  const fetchPatientRecords = async () => {\r\n    if (!fetchPatientID) {\r\n      alert(\"Please enter a Patient ID\");\r\n      return;\r\n    }\r\n    try {\r\n      const records = await contract.getPatientRecords(fetchPatientID);\r\n      setPatientRecords(records);\r\n    } catch (error) {\r\n      console.error(\"Error fetching patient records\", error);\r\n      alert(\"Failed to fetch records. Are you an authorized provider?\");\r\n    }\r\n  };\r\n\r\n  const addRecord = async () => {\r\n    try {\r\n      const tx = await contract.addRecord(\r\n        addPatientID,\r\n        patientName,\r\n        diagnosis,\r\n        treatment,\r\n        recordCategory\r\n      );\r\n      await tx.wait();\r\n      alert(\"Record added successfully!\");\r\n    } catch (error) {\r\n      console.error(\"Error adding record:\", error);\r\n      alert(\"Failed to add record.\");\r\n    }\r\n  };\r\n\r\n  const authorizeProvider = async () => {\r\n    if (!isOwner) {\r\n      alert(\"Only the contract owner can perform this action.\");\r\n      return;\r\n    }\r\n    try {\r\n      const tx = await contract.authorizeProvider(providerAddress);\r\n      await tx.wait();\r\n      alert(`Provider ${providerAddress} authorized successfully`);\r\n    } catch (error) {\r\n      console.error(\"Error authorizing provider:\", error);\r\n    }\r\n  };\r\n\r\n  const registerPatient = async () => {\r\n    try {\r\n      const tx = await contract.registerPatient(\r\n        registerPatientAddress,\r\n        registerPatientID\r\n      );\r\n      await tx.wait();\r\n      alert(\"Patient registered successfully!\");\r\n    } catch (error) {\r\n      console.error(\"Error registering patient:\", error);\r\n      alert(\r\n        \"Failed to register patient. Check if the address or ID is already registered.\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const getMyRecords = async () => {\r\n    try {\r\n      const records = await contract.getMyRecords();\r\n      setMyRecords(records);\r\n      if (records.length === 0) {\r\n        alert(\"No records found for your account.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching your records:\", error);\r\n      alert(\"Failed to fetch your records. Are you a registered patient?\");\r\n    }\r\n  };\r\n\r\n  const renderRecords = (records) => {\r\n    return records.map((record, index) => (\r\n      <div key={index} className=\"record-item\">\r\n        <p>\r\n          <b>Record ID:</b> {record.recordID.toString()}\r\n        </p>\r\n        <p>\r\n          <b>Patient Name:</b> {record.patientName}\r\n        </p>\r\n        <p>\r\n          <b>Diagnosis:</b> {record.diagnosis}\r\n        </p>\r\n        <p>\r\n          <b>Treatment:</b> {record.treatment}\r\n        </p>\r\n        <p>\r\n          <b>Category:</b> {recordCategories[record.category]}\r\n        </p>\r\n        <p>\r\n          <b>Timestamp:</b>{\" \"}\r\n          {new Date(record.timestamp.toNumber() * 1000).toLocaleString()}\r\n        </p>\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  // --- The JSX / UI Part ---\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"title\">Healthcare Records dApp</h1>\r\n      {account && <p className=\"account-info\">Connected Account: {account}</p>}\r\n      {isOwner && <p className=\"owner-info\">Role: Contract Owner</p>}\r\n\r\n      <div className=\"section\">\r\n        <h2>Patient Actions</h2>\r\n        <button className=\"action-button\" onClick={getMyRecords}>\r\n          View My Records\r\n        </button>\r\n        {myRecords.length > 0 && (\r\n          <div className=\"records-section\">\r\n            <h3>Your Medical Records:</h3>\r\n            {renderRecords(myRecords)}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <hr />\r\n\r\n      <div className=\"section\">\r\n        <h2>Healthcare Provider Actions</h2>\r\n\r\n        <div className=\"form-section\">\r\n          <h3>Register a New Patient</h3>\r\n          <input\r\n            className=\"input-field\"\r\n            type=\"text\"\r\n            placeholder=\"Patient's Wallet Address\"\r\n            value={registerPatientAddress}\r\n            onChange={(e) => setRegisterPatientAddress(e.target.value)}\r\n          />\r\n          <input\r\n            className=\"input-field\"\r\n            type=\"text\"\r\n            placeholder=\"Assign a Patient ID\"\r\n            value={registerPatientID}\r\n            onChange={(e) => setRegisterPatientID(e.target.value)}\r\n          />\r\n          <button className=\"action-button\" onClick={registerPatient}>\r\n            Register Patient\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"form-section\">\r\n          <h3>Add Patient Record</h3>\r\n          <input\r\n            className=\"input-field\"\r\n            type=\"text\"\r\n            placeholder=\"Patient ID\"\r\n            value={addPatientID}\r\n            onChange={(e) => setAddPatientID(e.target.value)}\r\n          />\r\n          <input\r\n            className=\"input-field\"\r\n            type=\"text\"\r\n            placeholder=\"Patient Name\"\r\n            value={patientName}\r\n            onChange={(e) => setPatientName(e.target.value)}\r\n          />\r\n          <input\r\n            className=\"input-field\"\r\n            type=\"text\"\r\n            placeholder=\"Diagnosis\"\r\n            value={diagnosis}\r\n            onChange={(e) => setDiagnosis(e.target.value)}\r\n          />\r\n          <input\r\n            className=\"input-field\"\r\n            type=\"text\"\r\n            placeholder=\"Treatment\"\r\n            value={treatment}\r\n            onChange={(e) => setTreatment(e.target.value)}\r\n          />\r\n          <select\r\n            className=\"input-field\"\r\n            value={recordCategory}\r\n            onChange={(e) => setRecordCategory(e.target.value)}\r\n          >\r\n            <option value=\"0\">Consultation</option>\r\n            <option value=\"1\">Prescription</option>\r\n            <option value=\"2\">Lab Result</option>\r\n          </select>\r\n          <button className=\"action-button\" onClick={addRecord}>\r\n            Add Record\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"form-section\">\r\n          <h3>Fetch Patient Records</h3>\r\n          <input\r\n            className=\"input-field\"\r\n            type=\"text\"\r\n            placeholder=\"Enter Patient ID\"\r\n            value={fetchPatientID}\r\n            onChange={(e) => setFetchPatientID(e.target.value)}\r\n          />\r\n          <button className=\"action-button\" onClick={fetchPatientRecords}>\r\n            Fetch Records\r\n          </button>\r\n          {patientRecords.length > 0 && (\r\n            <div className=\"records-section\">\r\n              <h4>Fetched Records:</h4>\r\n              {renderRecords(patientRecords)}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <hr />\r\n\r\n      {/* This section will now correctly appear once you update the ownerAddress variable */}\r\n      {isOwner && (\r\n        <div className=\"section\">\r\n          <h2>Contract Owner Actions</h2>\r\n          <div className=\"form-section\">\r\n            <h3>Authorize Healthcare Provider</h3>\r\n            <input\r\n              className=\"input-field\"\r\n              type=\"text\"\r\n              placeholder=\"Provider Address\"\r\n              value={providerAddress}\r\n              onChange={(e) => setProviderAddress(e.target.value)}\r\n            />\r\n            <button className=\"action-button\" onClick={authorizeProvider}>\r\n              Authorize Provider\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Healthcare;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}